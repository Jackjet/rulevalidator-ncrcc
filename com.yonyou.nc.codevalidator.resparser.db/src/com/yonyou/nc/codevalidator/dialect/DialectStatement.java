package com.yonyou.nc.codevalidator.dialect;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class DialectStatement implements Statement {
	private Statement realStatement = null;

	private DialectAdapter adapter = null;

	public DialectStatement(Statement stmt) {
		this.realStatement = stmt;
	}

	public void setAdapter(DialectAdapter adapter) {
		this.adapter = adapter;
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		ResultSet rs = realStatement.executeQuery(sql);
		DialectResultSet drs = new DialectResultSet(rs);
		drs.setAdapter(adapter);
		return drs;
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		realStatement.addBatch(sql);
	}

	@Override
	public void cancel() throws SQLException {
		realStatement.cancel();

	}

	@Override
	public void clearBatch() throws SQLException {
		realStatement.clearBatch();

	}

	@Override
	public void clearWarnings() throws SQLException {
		realStatement.clearWarnings();

	}

	@Override
	public void close() throws SQLException {
		realStatement.close();
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		return realStatement.execute(sql);
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		return realStatement.execute(sql, autoGeneratedKeys);
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return realStatement.execute(sql, columnIndexes);
	}

	@Override
	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		return realStatement.execute(sql, columnNames);
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return realStatement.executeBatch();
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		return realStatement.executeUpdate(sql);
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		return realStatement.executeUpdate(sql, autoGeneratedKeys);
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		return realStatement.executeUpdate(sql, columnIndexes);
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		return realStatement.executeUpdate(sql, columnNames);
	}

	@Override
	public Connection getConnection() throws SQLException {
		return realStatement.getConnection();
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return realStatement.getFetchDirection();
	}

	@Override
	public int getFetchSize() throws SQLException {
		return realStatement.getFetchSize();
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		ResultSet rs = realStatement.getGeneratedKeys();
		return new DialectResultSet(rs);
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return realStatement.getMaxFieldSize();
	}

	@Override
	public int getMaxRows() throws SQLException {
		return realStatement.getMaxRows();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return realStatement.getMoreResults();
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return realStatement.getMoreResults();
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return realStatement.getQueryTimeout();
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		ResultSet rs = realStatement.getResultSet();
		return new DialectResultSet(rs);
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return realStatement.getResultSetConcurrency();
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return realStatement.getResultSetHoldability();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return realStatement.getResultSetType();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return realStatement.getUpdateCount();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return realStatement.getWarnings();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return realStatement.isClosed();
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return realStatement.isPoolable();
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		realStatement.setCursorName(name);

	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		realStatement.setEscapeProcessing(enable);

	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		realStatement.setFetchDirection(direction);

	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		realStatement.setFetchSize(rows);

	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		realStatement.setMaxFieldSize(max);

	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		realStatement.setMaxRows(max);

	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		realStatement.setPoolable(poolable);

	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		realStatement.setQueryTimeout(seconds);
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return realStatement.isWrapperFor(iface);
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return realStatement.unwrap(iface);
	}

}